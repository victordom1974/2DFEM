% Modified from Francisco-Javier Sayas script
% 
% Add interior edges 
% FEMmesh is a struct containing (a lot of) information on a mesh.
% 
% These are the fields:
%
% coord        :  nEl x 2, coordinates of the vertices
% tr           :  nTr x 3, triangles of the grid
% domain       :  nTr x 1, domain the triangle belongs to 
% eD           :  nDir x 2, Dirichlet edges
% eN           :  nNeu x 2, Neumann edges
% eI           :  inner edges
% normal       :  neD x 2, non-unitary normal vector of each Neumann edge 
% detBk        :  nTr x 1, determinants
% c11 
% c12          :  nTr x 1, entries of the matrix C_K 
% c22  
% eD2tr        :  neD x 1  with the triangle containing each Dirichlet edge   
% eN2tr        :  neN x 1  with the triangle containing each Neumann edge
% eI2tr        :  neN x 2  triangles sharing each Dirichlet edge
% tr2E         :  nTr x 3 the edges in each triangle. The values must
%                 be read as follows: for any j in tr2E
%                 if j <= neI,       is the edge j in eI 
%                 if neI<j<=neI+neN  is the j-neI edge in eN
%                 if neI+neN  <j         is the j-neI-neN in edge of eD
%
% not included but could be considered in the future
%
% Bk            :  matrix Bk
% E             :  edges, contructed with 
%                  [eI; eN; eD]
%
% First version: September 2015 
%
% Last update October 2017: Some incopatibilities appearing in Matlab
% R2017b have been fixed. Roughly speaking, in this version of Matlab
% p,e,t are a P2 mesh grid, not a P1 mesh grid as it has been so far. 
%
% October 2017


clear FEMmesh
FEMmesh.tr     = t(1:3,:).';
FEMmesh.coord  = p(:,1:max(FEMmesh.tr(:)))';
FEMmesh.domain = t(end,:).';

% We remove inner edges, that is, edges in the interfaces
% between submains (this could happen if a domain in PDEtool
% is defined as P1+P2)
%
ind= (e(6,:)~=0 & e(7,:));
e(:,ind)=[];

j = find(e(6,:)==0); % Exterior edges
e([1 2],j) = e([2 1],j);
e(:,j) = e(:,j(end:-1:1));

NList = find(b(2,e(5,:))==0);
DList = find(b(2,e(5,:))~=0);
FEMmesh.eD  = e([1 2], DList).';
FEMmesh.eN  = e([1 2], NList).';

% Connectivity matrix  
edges=[];
edgesLocal =[2 3; 3 1; 1 2]; 

auxE  = kron([1 1 1]',[1:length(FEMmesh.tr)]'); 
edges = [edges; FEMmesh.tr(:,[2 3] )];
edges = [edges; FEMmesh.tr(:,[3 1] )];
edges = [edges; FEMmesh.tr(:,[1 2] )];

edges = sort(edges,2);
 
[edges, jed] = sortrows(edges);
jed = auxE(jed);

% Now each row of [edges jed]
% is an edge and the triangle it belongs to  

% Find interior edges (the only ones which are repeated)
jQ = all(edges(1:end-1,:) == edges(2:end,:),2); 
FEMmesh.eI = edges(jQ,:); 
FEMmesh.eI2tr = [jed(jQ) jed([logical(0);jQ])]; 

% neumann and dirichlet Edges  to triangle
ind = ~([logical(0);jQ] | [jQ; logical(0)]); 
% triangles
auxEtoT = jed(ind);
% Dirichelet and neumann edges 
auxEDN  = edges(ind,:);

[~,indD]  = ismember(sort(FEMmesh.eD,2),auxEDN,'rows');
indD = indD(indD~=0); 
FEMmesh.eD2tr = auxEtoT(indD);

[~,indN]  = ismember(sort(FEMmesh.eN,2),auxEDN,'rows');
indN = indN(indN~=0); 
FEMmesh.eN2tr = auxEtoT(indN);


%%% In progress
auxE = [FEMmesh.eI; FEMmesh.eN; FEMmesh.eD];
auxE = sort(auxE,2); 
[~,ind1] = ismember(sort(FEMmesh.tr(:,[1 2]),2),auxE,'rows'); 
[~,ind2] = ismember(sort(FEMmesh.tr(:,[2 3]),2),auxE,'rows'); 
[~,ind3] = ismember(sort(FEMmesh.tr(:,[3 1]),2),auxE,'rows'); 
FEMmesh.tr2E =[ind1 ind2 ind3];     
%%% 
% Determinants 
px = FEMmesh.coord(:,1);
py = FEMmesh.coord(:,2);

%x2-x1
B11 = px(FEMmesh.tr(:,2))-px(FEMmesh.tr(:,1));
%x3-x1
B12 = px(FEMmesh.tr(:,3))-px(FEMmesh.tr(:,1));
%y2-y1
B21 = py(FEMmesh.tr(:,2))-py(FEMmesh.tr(:,1));
%y3-y1
B22 = py(FEMmesh.tr(:,3))-py(FEMmesh.tr(:,1));

FEMmesh.detBk = B11.*B22-B21.*B12; 
FEMmesh.c11   = (B12.^2 + B22.^2)./FEMmesh.detBk;
FEMmesh.c12  = -(B11.*B12 +B21.*B22)./FEMmesh.detBk;
FEMmesh.c22   = (B11.^2 + B21.^2)./FEMmesh.detBk;

% QuadRule 
%LocalWeights= nodes; % Values of the local basis at nodes
                     % For P1 elements this is just nodes
% weights = [1/6; 1/6; 1/6; 0]; 

%Neumann 

tx =  px(FEMmesh.eN(:,2)) - px(FEMmesh.eN(:,1));
ty =  py(FEMmesh.eN(:,2)) - py(FEMmesh.eN(:,1));

FEMmesh.normal = [ty -tx]; 

% For testing purposes
% 
% px = FEMmesh.coord(:,1);
% py = FEMmesh.coord(:,2);
% % Plot Neumann, Dirichlet and inner edges
% line(px(FEMmesh.eD).',py(FEMmesh.eD).')
% line(px(FEMmesh.eN).',py(FEMmesh.eN).')
% line(px(FEMmesh.eI).',py(FEMmesh.eI).')
% 